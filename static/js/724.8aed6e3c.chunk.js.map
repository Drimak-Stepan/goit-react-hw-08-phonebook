{"version":3,"file":"static/js/724.8aed6e3c.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","redux/filter/filterSelectors.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const getContacts = ({ contacts }) => contacts.contacts;\n\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.contacts;\n  }\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.contacts.filter(({ name }) => {\n    const normalized = name.toLowerCase();\n    return normalized.includes(normalizedFilter);\n  });\n\n  return result;\n};\n\nexport const isLoading = ({ contacts }) => contacts.isLoading;\n","import styled from '@emotion/styled';\n\nexport const Stats = styled.ul`\n  list-style: none;\n  padding: 10px 0;\n  margin: 10px 0;\n  border-radius: 8px;\n  border: 4px solid #9cb0b3;\n`;\n\nexport const StatsLi = styled.li`\n  position: relative;\n  padding: 14px;\n`;\n\nexport const Item = styled.span`\n  font-size: 20px;\n  font-weight: 700;\n  padding: 8px;\n  background-color: white;\n  border-radius: 5px;\n  border: 1px solid #9cb0b3;\n`;\n\nexport const Btn = styled.button`\n  position: absolute;\n  bottom: 5px;\n  right: 5px;\n  font-weight: 700;\n  font-size: 20px;\n  padding: 8px;\n  border-radius: 5px;\n  border: 1px solid #9cb0b3;\n  cursor: pointer;\n  color: black;\n  background-color: white;\n  transition: color 300ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 300ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover {\n    background-color: #9cb0b3;\n    color: white;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contactsOperations';\nimport { getFilteredContacts } from 'redux/contacts/contactsSelectors';\nimport { Stats, StatsLi, Item, Btn } from './ContactList.styled';\n\nconst ContactList = () => {\n  const list = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(deleteContact(id));\n  return (\n    <Stats>\n      {list.map(({ id, name, number }) => (\n        <StatsLi key={id}>\n          <Item>{name}:</Item>\n          <Item>{number}</Item>\n          <Btn type=\"button\" onClick={() => onDeleteContact(id)}>\n            Delete\n          </Btn>\n        </StatsLi>\n      ))}\n    </Stats>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  padding: 10px;\n  border-radius: 8px;\n  border: 4px solid #9cb0b3;\n`;\n\nexport const Label = styled.label`\n  font-weight: 700;\n  font-size: 20px;\n  color: black;\n`;\n\nexport const Input = styled.input`\n  font-size: 20px;\n  padding: 8px;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  border: 1px solid #9cb0b3;\n  outline-color: #9cb0b3;\n`;\n\nexport const Btn = styled.button`\n  font-weight: 700;\n  font-size: 20px;\n  padding: 8px;\n  border-radius: 5px;\n  border: 1px solid #9cb0b3;\n  outline-color: #9cb0b3;\n  cursor: pointer;\n  color: black;\n  background-color: white;\n  transition: color 300ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover {\n    background-color: #9cb0b3;\n    color: white;\n  }\n`;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useState, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { Form, Label, Input, Btn } from './ContactForm.styled';\nimport { nanoid } from 'nanoid';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handelChangeNumber = e => {\n    setNumber(e.target.value);\n  };\n\n  const handelSubmit = e => {\n    e.preventDefault();\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const nameId = useMemo(() => nanoid(), []);\n  const numberId = useMemo(() => nanoid(), []);\n\n  return (\n    <>\n      <Form onSubmit={handelSubmit}>\n        <Label htmlFor={nameId}>Name</Label>\n        <div>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            id={nameId}\n            value={name}\n            onChange={e => setName(e.target.value)}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </div>\n        <Label htmlFor={numberId}>Number</Label>\n        <div>\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            id={numberId}\n            value={number}\n            onChange={handelChangeNumber}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </div>\n        <Btn type=\"submit\">Add contact</Btn>\n      </Form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","export const getFilter = ({ filter }) => filter;\n","import styled from '@emotion/styled';\n\nexport const Block = styled.form`\n  padding: 10px;\n  border-radius: 8px;\n  border: 4px solid #9cb0b3;\n`;\n\nexport const Label = styled.label`\n  font-weight: 700;\n  font-size: 20px;\n  color: black;\n`;\n\nexport const Input = styled.input`\n  font-size: 20px;\n  padding: 8px;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  border: 1px solid #9cb0b3;\n  outline-color: #9cb0b3;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { getFilter } from 'redux/filter/filterSelectors';\nimport { Block, Label, Input } from './Filter.styled';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  return (\n    <Block>\n      <Label htmlFor=\"filterId\">Find contacts by name</Label>\n      <div>\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          value={value}\n          onChange={e => dispatch(setFilter(e.target.value))}\n          id=\"filterId\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n    </Block>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from '../components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { isLoading } from 'redux/contacts/contactsSelectors';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoad = useSelector(isLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      <div>{isLoad && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["getFilteredContacts","contacts","filter","normalizedFilter","toLowerCase","name","includes","isLoading","Stats","styled","StatsLi","Item","Btn","list","useSelector","dispatch","useDispatch","map","id","number","type","onClick","deleteContact","onDeleteContact","Form","Label","Input","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","useState","setName","setNumber","nameId","useMemo","numberId","onSubmit","e","preventDefault","addContact","htmlFor","value","onChange","target","pattern","title","required","getFilter","Block","setFilter","Tasks","isLoad","useEffect","fetchContacts","Helmet"],"sourceRoot":""}